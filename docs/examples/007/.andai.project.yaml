llm_models:
# your llm config here

projects:
# your projects here

redmine:
  db: redmine:redmine@tcp(localhost:3306)/redmine
  url: "http://localhost:10083"
  api_key: "2159cef2fb6c82c4f66981f199798781e161c694"
  repositories: "/var/repositories/"

aider:
  timeout: "180m"
  config: "/path/to/.andai.aider.yaml"
  map_tokens:  1024

workflow:
  states:
    Init:
      ai: ["Task", "Grooming"]
      is_default: True
      is_first: True
    Backlog:
      ai: ["Story", "Task", "Grooming"]
      description: Issue is ready to be worked on.
    Analysis:
      ai: ["Story", "Task", "Grooming"]
      description: Analyze Issue and plan how to work on it.
    In Progress:
      ai: ["Story", "Task", "Grooming"]
      description: Analyze Issue and plan how to work on it.
    Deployment:
      ai: ["Story", "Task", "Grooming"]
      description: Merge code into to parent Issue branch.
    QA:
      ai: ["Story", "Task", "Grooming"]
      description: |
        Check current state of the story code.
        If everything is fine, move to Done. 
        If not, move to In Progress where new Tasks will try to fix discovered issues.
    Review:
      ai: ["Task", "Grooming"]
      description: Human QA to check Story code.
    Done:
      description: Issue is completed.
      ai: []
      is_closed: True

  transitions:
    - source: Init
      target: Backlog

    - source: Backlog
      target: Analysis
    - source: Analysis
      target: In Progress

    - source: In Progress
      target: QA

    - source: QA
      success: true
      target: Review
    - source: QA
      fail: true
      target: Analysis

    - source: Review
      success: true
      target: Deployment

    - source: Review
      fail: true
      target: Analysis

    - source: Deployment
      success: true
      target: Done

    - source: Done
      target: QA

  issue_types:
    Story:
      description: |
        A specific functionality or component. Scope: Feature components.
      jobs:
        Backlog:
          steps:
            - command: next
        Analysis:
          steps:
            - command: context-files
              context: ["wiki", "ticket", "comments"]
              remember: True
            - command: summarize-task
              comment: True
              context: ["issue_types", "project", "wiki", "ticket", "comments", "children"]
              prompt: |
                Based on comments figure out if task was already worked on 
                and if this time it is required to adjust something instead of creating issue to implement the story.
                If this is the case (issue was already worked on) this means that issue failed QA and we need to
                create new issues that addresses QA findings. 
                Understand that based on current issue comments and their time.
                If there are no comments or existing comments don't show that issue was already worked on, 
                then create new issues that are needed for this story issue.
                Summary: Break down the current Story issue into Task issues based on pre-planned ideas from comments, 
                ensuring detailed descriptions for each task. Review existing comments to clarify requirements, 
                check if the task was previously worked on, and determine if adjustments are needed. 
                If adjustments are needed then it means that the task failed QA, 
                create new issues to address QA findings. If thereâ€™s no evidence of prior work, 
                create new tasks to implement the Story. 
                Use comment timestamps and context to guide decisions, 
                ensuring alignment with QA requirements.
                Now using what you know, analyze current_issue and comments carefully.
                Suggest how to split current Story issue into smaller scope Task issues (make sure to stick with Task issue scope and create as many Task issues as necessary).
                Dont forget to mention scope of the Task issues you create.
                Make sure each Task issue is small enough to be implemented in a single code file or even better - one part of a single code file.
        In Progress:
          steps:
            - command: create-issues
              action: Task
              prompt: |
                Based on last comments and context that you are presented with,
                split current Story issue into Task issues using pre-planned idea mentioned in comments. 
                Write a detailed description of what needs to be done. 
                Comply to clarification comments if exists.
                Make the new issues detailed, clear and concise. Dont forget to mention scope of the files that need to be worked on.
                Keep in mind that Task issue are small enough to be implemented in a single code file or even better - one part of a single code file.
              context: ["issue_types", "ticket", "comments"]
        QA:
          steps:
            - command: project-cmd
              action: reformat
            - command: commit
              prompt: linter changes
            - command: project-cmd
              action: lint
              remember: True
            - command: project-cmd
              action: test
              remember: True
            - command: context-files
              context: [ "wiki", "ticket", "comments", "children" ]
              remember: True
            - command: aider
              action: architect
              prompt: |
                Check recently implemented code necessary to complete Story issue.
                Check in recent comments test and linter results and code logical errors.
                Evaluate issues you found and summarize in positive or negative feedback.
                Unit tests and linter results (see previous comments) are mandatory for positive feedback.
                If feedback is mostly positive and code will work as expected it should be positive.
                If code have obvious syntactic or logical errors it should be negative.
                All other context information available to you is meant only to help you figure out what code you should evaluate.
                Answer strictly based on code that is present.
              context: ["project", "wiki", "ticket", "children", "affected-files", "comments"] # TODO add children-closed
              comment: True
              summarize: True
              comment-summary: True
            - command: evaluate
              context: ["comments"]
        Review:
          steps:
        Deployment:
          steps:
            - command: merge-into-parent
    Task:
      description: |
        A unit of work focused on coding task in a single file or even better on single git commit for one part of the code file. 
        *Scope*: Only one code file or specific part of it.
        Multiple Task issues result in a single Story issue.
      jobs:
        Init:
          steps:
            - command: next
        Backlog:
          steps:
            - command: next
        Analysis:
          steps:
            - command: context-files
              context: ["wiki", "parents", "ticket", "comments"]
              remember: True
            - command: summarize-task
              comment: True
              context: ["project", "wiki", "ticket", "comments"]
              prompt: |
                Locate the necessary code files and add them to context.
                Provide ideas how to resolve the given Task issue.
                Focus only on the code relevant to the current issue (issue_type: Task).
                Ensure that the changes do not affect anything else beyond what is asked in the current Task issue.
                Ignore any code that is not related to the current issue.
                The broader changes required for the larger task are not relevant for this step.
                implement (code) given Task issue based on ticket description, last comments and your reasoning.
        In Progress:
          steps:
            - command: aider
              action: architect-code
              summarize: True
              comment-summary: False
              context: ["project", "wiki", "ticket", "last-5-comments"]
              prompt: Implement (code) given Task issue based on ticket description and last comments.
            - command: project-cmd
              action: reformat
            - command: commit
              prompt: linter changes
        QA:
          steps:
            - command: project-cmd
              action: lint
              remember: True
            - command: project-cmd
              action: test
              remember: True
            - command: ai
              prompt: |
                If there are any linter errors then pinpoint exact files and place in file (using linter output) that is at fault.
                Answer with clear and concise explanation of the sources for these linter errors.
                If there are any testing errors then pinpoint exact files and test cases that are faulty (using tests output).
                Keep the answer straight to the point of what was test cases are broken and in what file and where.
                If there are no linter and testing errors then answer with "Linter and tests are OK".
              comment: True
              remember: True
            - command: create-issues
              action: Grooming
              prompt: |
                Create single (1) Grooming issue that are focusing on fixing all linter and test errors.
                In new Grooming issue description carefully define what errors there are based on available context and how to fix them as a list.
                If there are no linter or tests failures present then do nothing (do not create any new Grooming issues).
              context: ["issue_types", "ticket"]
        Review:
          steps:
            - command: next
        Deployment:
          steps:
            - command: merge-into-parent

    Grooming:
      description: |
        A unit of work focused on adjusting parent task code and fixing linter and tests code.
      jobs:
        Init:
          steps:
            - command: next
        Backlog:
          steps:
            - command: next
        Analysis:
          steps:
            - command: project-cmd
              action: lint
              remember: True
            - command: project-cmd
              action: test
              remember: True
            - command: context-files
              context: ["project", "wiki", "parents", "ticket", "comments"]
              remember: True
            - command: summarize-task
              context: ["issue_types", "project", "wiki", "parents", "ticket", "comments"]
              comment: True
              prompt: |
                Analyze issue description and all mentioned errors 
                and provide a clear list of points with possible ways how to fix them one by one.
        In Progress:
          steps:
            - command: aider
              action: code
              summarize: True
              comment-summary: False
              comment: False
              context: ["issue_types", "project", "wiki", "parents", "ticket", "last-comment"]
              prompt: |
                Implement (code) given Task issue based on ticket description and last comments.
                It is not allowed to create new files! 
                Evaluate other project files to learn how to do problematic parts 
                and make necessary changes using that knowledge.
            - command: project-cmd
              action: reformat
            - command: commit
              prompt: linter changes
        QA:
          steps:
            - command: next
        # searching for that perfect setup. With this LLM fails to fix linter forever. Don't have so much cash to burn. Fixing myself in Story Review step.
        #            - command: project-cmd
        #              action: lint
        #              remember: True
        #            - command: project-cmd
        #              action: test
        #              remember: True
        #            - command: ai
        #              prompt: |
        #                If there are any linter errors then pinpoint exact files and place in file (using linter output) that is at fault.
        #                Answer with clear and concise explanation of the sources for these linter errors.
        #                If there are any testing errors then pinpoint exact files and test cases that are faulty (using tests output).
        #                Keep the answer straight to the point of what was test cases are broken and in what file and where.
        #                If there are no linter and testing errors then answer with "Linter and tests are OK".
        #              comment: True
        #              remember: True
        #            - command: evaluate
        Review:
          steps:
            - command: next
        Deployment:
          steps:
            - command: merge-into-parent

  priorities:
    - type: Grooming
      state: Deployment
    - type: Grooming
      state: Review
    - type: Grooming
      state: QA
    - type: Grooming
      state: In Progress
    - type: Grooming
      state: Analysis
    - type: Grooming
      state: Backlog
    - type: Grooming
      state: Init

    - type: Task
      state: Deployment
    - type: Task
      state: Review
    - type: Task
      state: QA
    - type: Task
      state: In Progress
    - type: Task
      state: Analysis
    - type: Task
      state: Backlog
    - type: Task
      state: Init

    - type: Story
      state: Deployment
    - type: Story
      state: Review
    - type: Story
      state: QA
    - type: Story
      state: In Progress
    - type: Story
      state: Analysis
    - type: Story
      state: Backlog

  triggers:
    - issue_type: Task
      if:
        - moved_to: Done
          all_siblings_status: Done
          transition:
            who: parent
            to: Review
    - issue_type: Grooming
      if:
        - moved_to: Done
          all_siblings_status: Done
          transition:
            who: parent
            to: Review
