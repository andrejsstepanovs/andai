# This is a template for Andai project configuration file.
# Go over line by line and edit lines that are marked with comment "<--".
# Modify this file after that as you see fit to match your needs.
# Please read documentation about all the possibilities in docs/README.md

llm_models:
  - name: "normal"                                             # <-- Uncomment model you want to use

    # Anthropic
    # model: "claude-3-7-sonnet-latest"
    # provider: "anthropic"
    # api_key: "sk-*****"
    # temperature: 0.2
    # max_tokens: 128000

    # LM-Studio
    # model: "qwq-32b"
    # base_url: "http://localhost:1234/v1/chat/completions"
    # api_key: "lmstudio"

    # Google
    model: "gemini-2.0-flash"
    provider: google
    max_tokens: 16384
    api_key: "*****"

    # OpenAI
    # model: "gpt-4.1"
    # provider: openai
    # max_tokens: 32768
    # api_key: "sk-****"

    # Groq
    # model: "deepseek-r1-distill-llama-70b"
    # provider: groq
    # max_tokens: 128000
    # api_key: "gsk_*****"

    # OpenRouter
    # model: "meta-llama/llama-4-maverick"
    # provider: openrouter
    # max_tokens: 32768
    # api_key: "sk-or-v1-*****"

    # LiteLLM (local)
    # model: llama3-1-70b
    # max_tokens: 32768
    # provider: litellm
    # api_key: "sk-1234"

    # model: "bedrock/anthropic.claude-sonnet-4-20250514-v1:0"
    # provider: "custom"
    # max_tokens: 65500
    # base_url: "https://CUSTOM_BASE_URL/v1/chat/completions"
    # api_key: "sk-*****"

  # Optional - Define other models and bind them to specific commands.
#  - name: "long"
#    temperature: 0.2
#    model: "gemini-2.0-flash"
#    provider: google
#    max_tokens: 2000000
#    api_key: "*****"
#    commands:
#      - summarize-task
#      #- create-issues
#      #- evaluate
#      #- ai

# redmine is running within docker and this config can stay hardcoded. Keep api-key as is. It plays no role in anything.
redmine:
  db: redmine:redmine@tcp(localhost:3306)/redmine
  url: "http://localhost:10083"
  api_key: "2159cef2fb6c82c4f66981f199798781e161c694"
  repositories: "/var/repositories/"

coding_agents:
  aider:
    timeout: "180m"
    map_tokens: 512                                                                                       # <-- double this if you have big codebase
    config: "/tmp/test/.andai.aider.yaml" # configure aider model in that file                            # <-- change path (full) to your .andai.aider.yaml file
    config_fallback: "/tmp/test/.andai.aider.fallback.yaml" # configure fallback aider model in that file # <-- change path (full) to your .andai.aider.fallback.yaml file (can be the same as coding_agents.aider.config)
    # model_metadata_file: "/tmp/test/.andai.aider.model.json" # https://github.com/BerriAI/litellm/blob/main/model_prices_and_context_window.json # Optional, create target config file and change path if you want to use it.
    # api_key is optional as it will be taken from .andai.aider.yaml file and this is override to set --openai-api-key=sk-1111 if there is a need to use custom env variable or hardcode.
    # api_key: "sk-1234"
    # api_key: "os.environ/YOUR_ENV_VAR_API_KEY"
    task_summary_prompt: |
      I need you to REFORMAT the technical information above into a structured developer task.
      DO NOT implement any technical solution - your role is ONLY to organize and present the information.
      
      ### Your Think Process:
      1. PRIORITY INFORMATION SOURCES (analyze in this order):
        - Current issue descriptions and requirements
        - Latest comments and discussions on the issue
        - Project wiki and documentation
        - Parent issues and dependencies
      
      2. CONTEXT TO INCORPORATE:
        - Project documentation and technical constraints
        - System architecture and integration points
        - Related tickets and dependencies
        - Previous implementation patterns and solutions
      
        ### Task Content Requirements:
        - Clearly identify the specific problem/feature to implement
        - Extract all technical requirements and acceptance criteria
        - Highlight potential obstacles, edge cases, and dependencies
        - Include relevant code references, API endpoints, data structures
        - Specify exact files to be modified
        - Identify specific methods to be changed (if known)
        - Reference similar implementations to follow existing patterns
      
      ### DELIVERABLE: A FORMATTED TASK WITH THESE SECTIONS:
      
        1. **Summary** (1-2 sentences describing the core task)
        2. **Background** (Essential context for understanding why this work matters)
        3. **Requirements** (Specific, measurable criteria for success)
        4. **Implementation Guide**:
        - Recommended approach
        - Specific steps with technical details
        - Code areas to modify
        - Potential challenges and considerations
        5. **Resources** (Code files, references that developer should work with)
        6. **Constraints** (Limitations or restrictions that may impact development)
      
      ### Output Style Requirements:
      - Format as an official assignment/directive to a developer
      - Use precise technical language appropriate for the development environment
      - Prioritize clarity and actionability over comprehensiveness
      - Include code snippets or pseudocode where helpful
      - Provide context and high-level understanding (marked as contextual information)
      - Highlight any areas of uncertainty requiring clarification
      - Use clear headings, bullet points, and code blocks for readability

      REMEMBER: Your task is ONLY to format and clarify the existing information, not to solve the technical problem or create new solutions.

projects:
  - identifier: "test"                                                                                                                                # <-- adjust to fit your project identity
    name: "Test Project"
    description: "Test project"
    git_path: "/test-repo/.git" # path to git repo from within redmine container                                                                      # <-- rename project directory name example: (test-repo -> dragonfly)
    git_local_dir: "/tmp/test-repo/.git" # path to git repo on local machine or if run from within container - path to git repo from within container # <-- change this path to point to your git repo path (full path)
    final_branch: "main" # branch where issue with no parent will be merged into. Can be anything. If branch does not exist, it will be created.
    delete_branch_after_merge: True # delete child task branch after merge into parent task branch
    wiki: |
      # My Test Project
      More info about the project here.
    commands:
      - name: "test"
        command: ["make", "test-unit"]             # <-- change command to run tests in your project
        ignore_err: True
        ignore_stdout_if_no_stderr: True
      - name: "lint"
        command: ["make", "run-lint"]              # <-- change command to run tests in your project
        ignore_err: True
        success_if_no_output: True
      - name: "reformat"
        command: ["gofmt", "-s", "-w", "."]        # <-- change command to run tests in your project (if you don't have it, then can also be `echo "OK"` or remove `reformat` from workflow config.
        ignore_err: True
        success_if_no_output: True
      - name: "list-code-files"
        command: [ "find", ".", "-print" ]
        ignore_err: True
        success_if_no_output: True

    # <-- Add more projects if needed. (Remember to add new paths to docker-compose.yaml too)
    # After changing projects run `andai setup projects` to sync this info with redmine.

workflow:
  states:
    Init:
      ai: ["Task", "Grooming"]
      is_default: True
      is_first: True
    Backlog:
      ai: ["Story", "Task", "Grooming"]
      description: Issue is ready to be worked on.
    Think:
      ai: ["Story", "Task", "Grooming"]
      description: Analyze Issue and plan how to work on it.
    Work:
      ai: ["Story", "Task", "Grooming"]
      description: Analyze Issue and plan how to work on it.
    Test:
      ai: ["Story", "Task", "Grooming"]
      description: |
        Check current state of the story code.
        If everything is fine, move to Done. 
        If not, move to Work where new Tasks will try to fix discovered issues.
    Fixing:
      ai: ["Story", "Task"]
      description: |
        Resolving issues identified during the Testing phase. If all is OK, will move to QA. 
        If fail to fix then will move task to Help where user will take it on.
    Help:
      ai: ["Story"]
      description: |
        Human in the middle bugfixing state for Grooming tasks.
    QA:
      ai: ["Task", "Grooming"]
      description: Human Test to check Story code.
    Deploy:
      ai: ["Story", "Task", "Grooming"]
      description: Merge code into to parent Issue branch.
    Done:
      description: Issue is completed.
      ai: []
      is_closed: True

  transitions:
    - { source: Init,    target: Backlog }
    - { source: Backlog, target: Think }
    - { source: Think,   target: Work }
    - { source: Work,    target: Test }
    - { source: Test,    target: QA,     success: true }
    - { source: Test,    target: Fixing, fail: true }
    - { source: Fixing,  target: QA,     success: true }
    - { source: Fixing,  target: Help,   fail: true }
    - { source: Help,    target: QA }
    - { source: Help,    target: Think }
    - { source: QA,      target: Deploy, success: true }
    - { source: QA,      target: Think,  fail: true }
    - { source: Deploy,  target: Done }

  issue_types:
    Epic: # Epic in this workflow is used as a knowledge vessel for Story tasks. Example Epics: refactoring, bugfixing, specific feature X, etc.
      description: "Represents a general task guidelines. Use these guidelines to plan task splitting and implementations."
      jobs:
        Backlog: {steps: [{command: next}]}
        Think: {steps: [{command: next}]}
        Work: {steps: [{command: next}]}
        Test: {steps: [{command: next}]}
        Fixing: {steps: [{command: next}]}
        Help: {steps: [{command: next}]}
        Deploy: {steps: [{command: next}]}

    Story:
      description: |
        Represents a significant feature or component that requires multiple Tasks to implement.
        Scope: Entire feature or major component, potentially spanning multiple files and modules.
      jobs:
        Backlog: {steps: [{command: next}]}
        Think:
          steps:
            - command: project-cmd
              context: ["project", "wiki", "parents", "ticket", "comments"]
              action: list-code-files
              prompt: |
                Analyze these code files and identify only the 2-6 most critical files
                a developer must modify or understand to complete this specific task.
                Answer with a list of relative code file paths. Do not explain file or what it contains, just list them.
                Include only files directly related to the task - exclude tangential, binary, or reference files.
              comment: true
            - command: context-files
              context: ["wiki", "ticket", "comments"]
              remember: True
            - command: ai
              context: ["project", "wiki", "parents", "ticket", "comments"]
              comment: True
              prompt: |
                You are an experienced Project Manager with expertise in translating business requirements into actionable technical specifications. Your task is to:

                1. Analyze the provided information about this ticket/issue thoroughly
                2. Identify and describe all necessary features from a business perspective
                3. Explain the user experience requirements and expected outcomes
                4. Prioritize components based on business value and dependencies
                5. Highlight potential edge cases and considerations
                6. Structure your response as a comprehensive ticket comment for the engineering team

                Important: Do not invent or add new requirements that weren't mentioned in the original ticket. 
                Your role is strictly to clarify, organize, and enhance the existing information, not to create new features or expand the scope. 
                Avoid feature creep.

                Your response should:
                - Begin with a brief summary of the overall objective (1-2 sentences)
                - Include detailed descriptions of each functional requirement with clear acceptance criteria
                - Specify any business rules, constraints, or regulatory requirements
                - Avoid technical implementation details (the "how") - focus on the "what" and "why"
                - Use precise, specific language that leaves no room for misinterpretation

                The engineering team will use your analysis to decompose this issue into smaller, manageable tasks. 
                Be thorough, specific, and ensure that all business requirements are clearly articulated.
            - command: summarize-task
              comment: True
              context: ["issue_types", "project", "wiki", "parents", "ticket", "comments", "children"]
              prompt: |
                Based on comments figure out if task was already worked on 
                and if this time it is required to adjust something instead of creating issue to implement the story.
                If this is the case (issue was already worked on) this means that issue failed Test and we need to
                create new issues that addresses Test findings. 
                Understand that based on current issue comments and their time.
                If there are no comments or existing comments don't show that issue was already worked on, 
                then create new issues that are needed for this story issue.
                Summary: Break down the current Story issue into Task issues based on pre-planned ideas from comments, 
                ensuring detailed descriptions for each task. QA existing comments to clarify requirements, 
                check if the task was previously worked on, and determine if adjustments are needed. 
                If adjustments are needed then it means that the task failed Test, 
                create new issues to address Test findings. If there’s no evidence of prior work, 
                create new tasks to implement the Story. 
                Use comment timestamps and context to guide decisions, 
                ensuring alignment with Test requirements.
                Now using what you know, analyze current_issue and comments carefully.
                Suggest how to split current Story issue into smaller scope Task issues (make sure to stick with Task issue scope and create as many Task issues as necessary).
                Dont forget to mention scope of the Task issues you create.
                Make sure each Task issue is small enough to be implemented in a single code file or even better - one part of a single code file.
        Work:
          steps:
            - command: create-issues
              action: Task
              prompt: |
                Based on parent tasks, last comments and context that you are presented with,
                split current Story issue into Task issues using pre-planned idea mentioned in parent Epic task (and comments). 
                Write a detailed description of what needs to be done. 
                Comply to clarification comments if exists.
                Make the new issues detailed, clear and concise. Dont forget to mention scope of the files that need to be worked on.
                Keep in mind that Task issue are small enough to be implemented in a single code file or even better - one part of a single code file.
                Each Task should result with necessary changes and successful Project wide Unit Tests.
                Also when you write Task description, keep in mind that the engineer who will work on it, will have no access to the parent Epic issue details.
                Because of that, make sure to include all relevant information in the Task issue description.
              context: ["issue_types", "project", "wiki", "parents", "ticket", "last-5-comments", "children"]
        Test:   {steps: [{command: next}]}
        Fixing: {steps: [{command: next}]}
        Help:   {steps: [{command: next}]}
        Deploy: {steps: [{command: merge-into-parent}]}
    Task:
      description: |
        Tasks are granular, independently implementable units of work for a Story, focusing on a single method or file part.
        Each Task represents a small Git commit, and completion requires necessary code changes and passing unit tests.
      jobs:
        Init:    {steps: [{command: next}]}
        Backlog: {steps: [{command: next}]}
        Think:
          steps:
            - command: context-commits
              context: [ "comments", "parent-comments", "siblings-comments" ]
              remember: True
            - command: context-files
              context: ["wiki", "parent", "ticket", "comments", "siblings-comments"]
              remember: True
            - command: summarize-task
              context: ["project", "wiki", "parent", "ticket", "last-5-comments"]
              comment: True
              prompt: |
                Locate code files that are relevant for current Task issue.
                Provide ideas how to resolve the given Task issue.
                Focus only on the code relevant to the current issue (issue_type: Task).
                Ensure that the changes do not affect anything else beyond what is asked in the current Task issue.
                implement (code) given Task issue based on ticket description, last comments and your reasoning.
                All project Unit tests should pass after your changes.
        Work:
          steps:
            - command: context-files
              context: ["ticket", "last-3-comments"]
              remember: True
            - command: aider
              action: architect-code
              context: ["project", "wiki", "ticket", "last-5-comments"]
              prompt: Implement (code) current Task issue based on available information.
            - command: project-cmd
              action: reformat
            - command: commit
              prompt: linter changes
        Test:
          steps:
            - command: project-cmd
              action: lint
              remember: True
            - command: project-cmd
              action: test
              remember: True
            - command: context-files
              context: [ "ticket", "last-3-comments" ]
              remember: True
            - command: context-commits
              context: [ "ticket", "comments", "parent-comments" ]
              remember: True
            - command: ai
              prompt: |
                If there are any linter errors then pinpoint exact files and place in file (using linter output) that is at fault.
                Answer with clear and concise explanation of the sources for these linter errors.
                If there are any testing errors then pinpoint exact files and test cases that are faulty (using tests output).
                Keep the answer straight to the point of what was test cases are broken and in what file and where.
                If there are no linter and testing errors then answer with "Linter and tests are OK".
              remember: True
            - command: create-issues
              action: Grooming
              context: ["issue_types", "ticket", "last-3-comments"]
              prompt: |
                Create Grooming issues that are focusing on fixing all found linter and test errors.
                
                Instructions:
                - Create one Grooming issue per error.
                - Do not create more than 2 Grooming issues. If more are needed then combine multiple tasks them into these 2 Grooming tasks.
                - If you are create new Grooming issues then always make sure that they are actionable coding tasks that dont involve anything else except coding. 
                - If there are no linter or tests failures present then do nothing (do not create any new Grooming issues).
                - If there is empty response this means that all tests are passing and linter and tests are OK. This is positive outcome.
                
                In new Grooming issue description carefully define:
                - What test or linter check needs fixing.
                - Where are affected files located.
                - Mention specific code changes that were made in current ticket so it will be easier to find the code that needs fixing.
            - command: evaluate
              context: [ "ticket", "comments" ]
        Fixing:
          steps:
            - command: project-cmd
              action: lint
              remember: True
            - command: project-cmd
              action: test
              remember: True
            # - command: ai
            #   prompt: |
            #     If there are any linter errors then pinpoint exact files and place in file (using linter output) that is at fault.
            #     Answer with clear and concise explanation of the sources for these linter errors.
            #     If there are any testing errors then pinpoint exact files and test cases that are faulty (using tests output).
            #     Keep the answer straight to the point of what was test cases are broken and in what file and where.
            #     If there are no linter and testing errors then answer with "Linter and tests are OK".
            #   remember: True
            - command: evaluate
              context: [ "ticket", "comments" ]
        Help:   {steps: [{command: next}]}
        QA:     {steps: [{command: next}]}
        Deploy: {steps: [{command: merge-into-parent}]}

    Grooming:
      description: |
        A unit of work focused on fixing test failures and linter issues. 
        Scope: Specific fixes for test failures and linter failures that was spotted during parent Task issue Testing phase.
      jobs:
        Init:    {steps: [{command: next}]}
        Backlog: {steps: [{command: next}]}
        Think:   {steps: [{command: next}]}
        Work:
          steps:
            - command: context-files
              context: [ "ticket", "comments", "parent" ]
              remember: True
            - command: aider
              action: code
              comment: False
              context: [ "project", "wiki", "ticket", "last-comment" ]
              prompt: |
                Implement (code) given Grooming issue based on ticket description and last comments.
                It is not allowed to create new files or run any commands!
            - command: project-cmd
              action: reformat
            - command: commit
              prompt: linter changes
        Test:   {steps: [{command: next}]}
        QA:     {steps: [{command: next}]}
        Deploy: {steps: [{command: merge-into-parent}]}

  priorities:
    - {type: Grooming, state: Deploy}
    - {type: Grooming, state: Fixing}
    - {type: Grooming, state: Help}
    - {type: Grooming, state: QA}
    - {type: Grooming, state: Test}
    - {type: Grooming, state: Work}
    - {type: Grooming, state: Think}
    - {type: Grooming, state: Backlog}
    - {type: Grooming, state: Init}
    - {type: Task, state: Deploy}
    - {type: Task, state: Fixing}
    - {type: Task, state: Help}
    - {type: Task, state: QA}
    - {type: Task, state: Test}
    - {type: Task, state: Work}
    - {type: Task, state: Think}
    - {type: Task, state: Backlog}
    - {type: Task, state: Init}
    - {type: Story, state: Deploy}
    - {type: Story, state: Fixing}
    - {type: Story, state: Help}
    - {type: Story, state: QA}
    - {type: Story, state: Test}
    - {type: Story, state: Work}
    - {type: Story, state: Think}
    - {type: Story, state: Backlog}
    - {type: Story, state: Init}
    - {type: Epic, state: Deploy}
    - {type: Epic, state: Fixing}
    - {type: Epic, state: Help}
    - {type: Epic, state: QA}
    - {type: Epic, state: Test}
    - {type: Epic, state: Work}
    - {type: Epic, state: Think}
    - {type: Epic, state: Backlog}
    - {type: Epic, state: Init}
