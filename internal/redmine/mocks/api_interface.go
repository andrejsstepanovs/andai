// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	redmine "github.com/mattn/go-redmine"
	mock "github.com/stretchr/testify/mock"
)

// APIInterface is an autogenerated mock type for the APIInterface type
type APIInterface struct {
	mock.Mock
}

// CreateIssue provides a mock function with given fields: issue
func (_m *APIInterface) CreateIssue(issue redmine.Issue) (*redmine.Issue, error) {
	ret := _m.Called(issue)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *redmine.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(redmine.Issue) (*redmine.Issue, error)); ok {
		return rf(issue)
	}
	if rf, ok := ret.Get(0).(func(redmine.Issue) *redmine.Issue); ok {
		r0 = rf(issue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(redmine.Issue) error); ok {
		r1 = rf(issue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIssueRelation provides a mock function with given fields: issueRelation
func (_m *APIInterface) CreateIssueRelation(issueRelation redmine.IssueRelation) (*redmine.IssueRelation, error) {
	ret := _m.Called(issueRelation)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueRelation")
	}

	var r0 *redmine.IssueRelation
	var r1 error
	if rf, ok := ret.Get(0).(func(redmine.IssueRelation) (*redmine.IssueRelation, error)); ok {
		return rf(issueRelation)
	}
	if rf, ok := ret.Get(0).(func(redmine.IssueRelation) *redmine.IssueRelation); ok {
		r0 = rf(issueRelation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.IssueRelation)
		}
	}

	if rf, ok := ret.Get(1).(func(redmine.IssueRelation) error); ok {
		r1 = rf(issueRelation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: project
func (_m *APIInterface) CreateProject(project redmine.Project) (*redmine.Project, error) {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *redmine.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(redmine.Project) (*redmine.Project, error)); ok {
		return rf(project)
	}
	if rf, ok := ret.Get(0).(func(redmine.Project) *redmine.Project); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(redmine.Project) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWikiPage provides a mock function with given fields: projectID, wikiPage
func (_m *APIInterface) CreateWikiPage(projectID int, wikiPage redmine.WikiPage) (*redmine.WikiPage, error) {
	ret := _m.Called(projectID, wikiPage)

	if len(ret) == 0 {
		panic("no return value specified for CreateWikiPage")
	}

	var r0 *redmine.WikiPage
	var r1 error
	if rf, ok := ret.Get(0).(func(int, redmine.WikiPage) (*redmine.WikiPage, error)); ok {
		return rf(projectID, wikiPage)
	}
	if rf, ok := ret.Get(0).(func(int, redmine.WikiPage) *redmine.WikiPage); ok {
		r0 = rf(projectID, wikiPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.WikiPage)
		}
	}

	if rf, ok := ret.Get(1).(func(int, redmine.WikiPage) error); ok {
		r1 = rf(projectID, wikiPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Issue provides a mock function with given fields: id
func (_m *APIInterface) Issue(id int) (*redmine.Issue, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 *redmine.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*redmine.Issue, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *redmine.Issue); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueRelations provides a mock function with given fields: issueID
func (_m *APIInterface) IssueRelations(issueID int) ([]redmine.IssueRelation, error) {
	ret := _m.Called(issueID)

	if len(ret) == 0 {
		panic("no return value specified for IssueRelations")
	}

	var r0 []redmine.IssueRelation
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]redmine.IssueRelation, error)); ok {
		return rf(issueID)
	}
	if rf, ok := ret.Get(0).(func(int) []redmine.IssueRelation); ok {
		r0 = rf(issueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.IssueRelation)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(issueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueStatuses provides a mock function with no fields
func (_m *APIInterface) IssueStatuses() ([]redmine.IssueStatus, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IssueStatuses")
	}

	var r0 []redmine.IssueStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redmine.IssueStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redmine.IssueStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.IssueStatus)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssuesOf provides a mock function with given fields: projectID
func (_m *APIInterface) IssuesOf(projectID int) ([]redmine.Issue, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for IssuesOf")
	}

	var r0 []redmine.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]redmine.Issue, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(int) []redmine.Issue); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Project provides a mock function with given fields: id
func (_m *APIInterface) Project(id int) (*redmine.Project, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Project")
	}

	var r0 *redmine.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*redmine.Project, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *redmine.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Projects provides a mock function with no fields
func (_m *APIInterface) Projects() ([]redmine.Project, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Projects")
	}

	var r0 []redmine.Project
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redmine.Project, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redmine.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.Project)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Trackers provides a mock function with no fields
func (_m *APIInterface) Trackers() ([]redmine.IdName, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trackers")
	}

	var r0 []redmine.IdName
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redmine.IdName, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redmine.IdName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.IdName)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIssue provides a mock function with given fields: issue
func (_m *APIInterface) UpdateIssue(issue redmine.Issue) error {
	ret := _m.Called(issue)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(redmine.Issue) error); ok {
		r0 = rf(issue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: project
func (_m *APIInterface) UpdateProject(project redmine.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(redmine.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWikiPage provides a mock function with given fields: projectID, wikiPage
func (_m *APIInterface) UpdateWikiPage(projectID int, wikiPage redmine.WikiPage) error {
	ret := _m.Called(projectID, wikiPage)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWikiPage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, redmine.WikiPage) error); ok {
		r0 = rf(projectID, wikiPage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Users provides a mock function with no fields
func (_m *APIInterface) Users() ([]redmine.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 []redmine.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redmine.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redmine.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WikiPage provides a mock function with given fields: projectID, title
func (_m *APIInterface) WikiPage(projectID int, title string) (*redmine.WikiPage, error) {
	ret := _m.Called(projectID, title)

	if len(ret) == 0 {
		panic("no return value specified for WikiPage")
	}

	var r0 *redmine.WikiPage
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*redmine.WikiPage, error)); ok {
		return rf(projectID, title)
	}
	if rf, ok := ret.Get(0).(func(int, string) *redmine.WikiPage); ok {
		r0 = rf(projectID, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.WikiPage)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(projectID, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPIInterface creates a new instance of APIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIInterface {
	mock := &APIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
