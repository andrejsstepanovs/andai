// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GitInterface is an autogenerated mock type for the GitInterface type
type GitInterface struct {
	mock.Mock
}

// BranchName provides a mock function with given fields: issueID
func (_m *GitInterface) BranchName(issueID int) string {
	ret := _m.Called(issueID)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(issueID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CheckoutBranch provides a mock function with given fields: name
func (_m *GitInterface) CheckoutBranch(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBranch provides a mock function with given fields: _a0
func (_m *GitInterface) DeleteBranch(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAffectedFiles provides a mock function with given fields: sha
func (_m *GitInterface) GetAffectedFiles(sha string) ([]string, error) {
	ret := _m.Called(sha)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(sha)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastCommitHash provides a mock function with given fields:
func (_m *GitInterface) GetLastCommitHash() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastCommits provides a mock function with given fields: count
func (_m *GitInterface) GetLastCommits(count int) ([]string, error) {
	ret := _m.Called(count)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]string, error)); ok {
		return rf(count)
	}
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPath provides a mock function with given fields:
func (_m *GitInterface) GetPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Reload provides a mock function with given fields:
func (_m *GitInterface) Reload() {
	_m.Called()
}

// SetPath provides a mock function with given fields: path
func (_m *GitInterface) SetPath(path string) {
	_m.Called(path)
}

// NewGitInterface creates a new instance of GitInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitInterface {
	mock := &GitInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
