


pkg/processor/product_tiers_consumer.go

pkg/processor/product_tiers_consumer_test.go

res/deploy/templates/deployment/deployment-appserver.yaml

res/deploy/templates/deployment/deployment-event-processor.yaml
I'll help guide you through implementing these tasks one by one.

Let's start with Task 1: Configure Event Consumer

In `pkg/config/config.go`, we need to add the new event type configuration. Here
are the changes needed:

```go
// In ConsumerEventTypes struct, add:
type ConsumerEventTypes struct {
    // ... existing fields ...
    ProductTiersEventType        string
}

// In Load() function, add to the returned Application struct:
Nakadi: Nakadi{
    // ... existing fields ...
    Consumer: Consumer{
        // ... existing fields ...
        EventType: ConsumerEventTypes{
            // ... existing fields ...
            ProductTiersEventType:
envString("EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE", "spp.product-tiers.compacted"),
        },
    },
}
```

In `pkg/config/config_test.go`, add these test cases:

```go
// Add to the tests slice in TestLoad:
{
    key: "EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE",
    val: "test.spp.product-tiers.compacted",
    modifier: func(c *config.Application) {
        c.Nakadi.Consumer.EventType.ProductTiersEventType =
"test.spp.product-tiers.compacted"
    },
},
```

In `delivery.yaml`, update the EVENT_BUS_CONSUMERS configuration in all
environments (PR, staging, live). Here's an example for the live environment:

```yaml
EVENT_BUS_CONSUMERS: |
    [
        // ... existing consumers ...
        {
            'event_name': 'spp.product-tiers.compacted',
            'consumer_count': 1,
            'batch_limit': 75
        }
    ]
```

Would you like me to continue with the next task?

I'll help make those changes using proper SEARCH/REPLACE blocks:

pkg/config/config.go
```go
<<<<<<< SEARCH
type ConsumerEventTypes struct {
        PriceExportEventType         string
        ODPAiKpiEventType            string
        SeasonalityIndexEventType    string
        BlockingRuleSummaryEventType string
        MediaUpdateEventType         string
=======
type ConsumerEventTypes struct {
        PriceExportEventType         string
        ODPAiKpiEventType            string
        SeasonalityIndexEventType    string
        BlockingRuleSummaryEventType string
        MediaUpdateEventType         string
        ProductTiersEventType        string
>>>>>>> REPLACE
```

pkg/config/config.go
```go
<<<<<<< SEARCH
                                EventType: ConsumerEventTypes{
                                        PriceExportEventType:
envString("EVENT_BUS_PRICE_EXPORT_EVENT_TYPE",
"shadow.lounge-article-selection-price-export.price-updated"),
                                        ODPAiKpiEventType:
envString("EVENT_BUS_ODPAI_KPI_EVENT_TYPE",
"odpai.adp.scalability.lounge-sell-through-rate.config"),
                                        SeasonalityIndexEventType:
envString("EVENT_BUS_SEASONALITY_INDEX_EVENT_TYPE",
"lounge.seasonality-index-compact"),
                                        BlockingRuleSummaryEventType:
envString("EVENT_BUS_BLOCKING_RULE_SUMMARY_EVENT_TYPE",
"lounge.article-blocking-rule.summary"),
                                        MediaUpdateEventType:
envString("EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE", "spp.media.compacted"),
=======
                                EventType: ConsumerEventTypes{
                                        PriceExportEventType:
envString("EVENT_BUS_PRICE_EXPORT_EVENT_TYPE",
"shadow.lounge-article-selection-price-export.price-updated"),
                                        ODPAiKpiEventType:
envString("EVENT_BUS_ODPAI_KPI_EVENT_TYPE",
"odpai.adp.scalability.lounge-sell-through-rate.config"),
                                        SeasonalityIndexEventType:
envString("EVENT_BUS_SEASONALITY_INDEX_EVENT_TYPE",
"lounge.seasonality-index-compact"),
                                        BlockingRuleSummaryEventType:
envString("EVENT_BUS_BLOCKING_RULE_SUMMARY_EVENT_TYPE",
"lounge.article-blocking-rule.summary"),
                                        MediaUpdateEventType:
envString("EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE", "spp.media.compacted"),
                                        ProductTiersEventType:
envString("EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE", "spp.product-tiers.compacted"),
>>>>>>> REPLACE
```

pkg/config/config_test.go
```go
<<<<<<< SEARCH
                        key: "EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE",
                        val: "test.spp.media.compacted",
                        modifier: func(c *config.Application) {
                                c.Nakadi.Consumer.EventType.MediaUpdateEventType
= "test.spp.media.compacted"
                        },
                },
=======
                        key: "EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE",
                        val: "test.spp.media.compacted",
                        modifier: func(c *config.Application) {
                                c.Nakadi.Consumer.EventType.MediaUpdateEventType
= "test.spp.media.compacted"
                        },
                },
                {
                        key: "EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE",
                        val: "test.spp.product-tiers.compacted",
                        modifier: func(c *config.Application) {
                                c.Nakadi.Consumer.EventType.ProductTiersEventTyp
e = "test.spp.product-tiers.compacted"
                        },
                },
>>>>>>> REPLACE
```

delivery.yaml
```yaml
<<<<<<< SEARCH
              {
                'event_name': 'spp.media.compacted',
                'consumer_count': 1,
                'batch_limit': 100
              }
=======
              {
                'event_name': 'spp.media.compacted',
                'consumer_count': 1,
                'batch_limit': 100
              },
              {
                'event_name': 'spp.product-tiers.compacted',
                'consumer_count': 1,
                'batch_limit': 75
              }
>>>>>>> REPLACE
```

Would you like me to continue with implementing the next task?

Applied edit to pkg/config/config_test.go
Applied edit to pkg/config/config.go
Applied edit to delivery.yaml



pkg/processor/product_tiers_consumer.go

pkg/processor/product_tiers_consumer_test.go

res/deploy/templates/deployment/deployment-appserver.yaml

res/deploy/templates/deployment/deployment-event-processor.yaml
I'll help guide you through implementing these tasks one by one.

Let's start with Task 1: Configure Event Consumer

In `pkg/config/config.go`, we need to add the new event type configuration. Here
are the changes needed:

```go
// In ConsumerEventTypes struct, add:
type ConsumerEventTypes struct {
    // ... existing fields ...
    ProductTiersEventType        string
}

// In Load() function, add to the returned Application struct:
Nakadi: Nakadi{
    // ... existing fields ...
    Consumer: Consumer{
        // ... existing fields ...
        EventType: ConsumerEventTypes{
            // ... existing fields ...
            ProductTiersEventType:
envString("EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE", "spp.product-tiers.compacted"),
        },
    },
}
```

In `pkg/config/config_test.go`, add these test cases:

```go
// Add to the tests slice in TestLoad:
{
    key: "EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE",
    val: "test.spp.product-tiers.compacted",
    modifier: func(c *config.Application) {
        c.Nakadi.Consumer.EventType.ProductTiersEventType =
"test.spp.product-tiers.compacted"
    },
},
```

In `delivery.yaml`, update the EVENT_BUS_CONSUMERS configuration in all
environments (PR, staging, live). Here's an example for the live environment:

```yaml
EVENT_BUS_CONSUMERS: |
    [
        // ... existing consumers ...
        {
            'event_name': 'spp.product-tiers.compacted',
            'consumer_count': 1,
            'batch_limit': 75
        }
    ]
```

Would you like me to continue with the next task?

I'll help make those changes using proper SEARCH/REPLACE blocks:

pkg/config/config.go
```go
<<<<<<< SEARCH
type ConsumerEventTypes struct {
        PriceExportEventType         string
        ODPAiKpiEventType            string
        SeasonalityIndexEventType    string
        BlockingRuleSummaryEventType string
        MediaUpdateEventType         string
=======
type ConsumerEventTypes struct {
        PriceExportEventType         string
        ODPAiKpiEventType            string
        SeasonalityIndexEventType    string
        BlockingRuleSummaryEventType string
        MediaUpdateEventType         string
        ProductTiersEventType        string
>>>>>>> REPLACE
```

pkg/config/config.go
```go
<<<<<<< SEARCH
                                EventType: ConsumerEventTypes{
                                        PriceExportEventType:
envString("EVENT_BUS_PRICE_EXPORT_EVENT_TYPE",
"shadow.lounge-article-selection-price-export.price-updated"),
                                        ODPAiKpiEventType:
envString("EVENT_BUS_ODPAI_KPI_EVENT_TYPE",
"odpai.adp.scalability.lounge-sell-through-rate.config"),
                                        SeasonalityIndexEventType:
envString("EVENT_BUS_SEASONALITY_INDEX_EVENT_TYPE",
"lounge.seasonality-index-compact"),
                                        BlockingRuleSummaryEventType:
envString("EVENT_BUS_BLOCKING_RULE_SUMMARY_EVENT_TYPE",
"lounge.article-blocking-rule.summary"),
                                        MediaUpdateEventType:
envString("EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE", "spp.media.compacted"),
=======
                                EventType: ConsumerEventTypes{
                                        PriceExportEventType:
envString("EVENT_BUS_PRICE_EXPORT_EVENT_TYPE",
"shadow.lounge-article-selection-price-export.price-updated"),
                                        ODPAiKpiEventType:
envString("EVENT_BUS_ODPAI_KPI_EVENT_TYPE",
"odpai.adp.scalability.lounge-sell-through-rate.config"),
                                        SeasonalityIndexEventType:
envString("EVENT_BUS_SEASONALITY_INDEX_EVENT_TYPE",
"lounge.seasonality-index-compact"),
                                        BlockingRuleSummaryEventType:
envString("EVENT_BUS_BLOCKING_RULE_SUMMARY_EVENT_TYPE",
"lounge.article-blocking-rule.summary"),
                                        MediaUpdateEventType:
envString("EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE", "spp.media.compacted"),
                                        ProductTiersEventType:
envString("EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE", "spp.product-tiers.compacted"),
>>>>>>> REPLACE
```

pkg/config/config_test.go
```go
<<<<<<< SEARCH
                        key: "EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE",
                        val: "test.spp.media.compacted",
                        modifier: func(c *config.Application) {
                                c.Nakadi.Consumer.EventType.MediaUpdateEventType
= "test.spp.media.compacted"
                        },
                },
=======
                        key: "EVENT_BUS_MEDIA_UPDATE_EVENT_TYPE",
                        val: "test.spp.media.compacted",
                        modifier: func(c *config.Application) {
                                c.Nakadi.Consumer.EventType.MediaUpdateEventType
= "test.spp.media.compacted"
                        },
                },
                {
                        key: "EVENT_BUS_PRODUCT_TIERS_EVENT_TYPE",
                        val: "test.spp.product-tiers.compacted",
                        modifier: func(c *config.Application) {
                                c.Nakadi.Consumer.EventType.ProductTiersEventTyp
e = "test.spp.product-tiers.compacted"
                        },
                },
>>>>>>> REPLACE
```

delivery.yaml
```yaml
<<<<<<< SEARCH
              {
                'event_name': 'spp.media.compacted',
                'consumer_count': 1,
                'batch_limit': 100
              }
=======
              {
                'event_name': 'spp.media.compacted',
                'consumer_count': 1,
                'batch_limit': 100
              },
              {
                'event_name': 'spp.product-tiers.compacted',
                'consumer_count': 1,
                'batch_limit': 75
              }
>>>>>>> REPLACE
```

Would you like me to continue with implementing the next task?

Applied edit to pkg/config/config_test.go
Applied edit to pkg/config/config.go
Applied edit to delivery.yaml
