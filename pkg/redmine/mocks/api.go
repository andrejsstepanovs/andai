// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	redmine "github.com/mattn/go-redmine"
)

// Api is an autogenerated mock type for the api type
type Api struct {
	mock.Mock
}

// CreateProject provides a mock function with given fields: project
func (_m *Api) CreateProject(project redmine.Project) (*redmine.Project, error) {
	ret := _m.Called(project)

	var r0 *redmine.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(redmine.Project) (*redmine.Project, error)); ok {
		return rf(project)
	}
	if rf, ok := ret.Get(0).(func(redmine.Project) *redmine.Project); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(redmine.Project) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWikiPage provides a mock function with given fields: projectId, wikiPage
func (_m *Api) CreateWikiPage(projectId int, wikiPage redmine.WikiPage) (*redmine.WikiPage, error) {
	ret := _m.Called(projectId, wikiPage)

	var r0 *redmine.WikiPage
	var r1 error
	if rf, ok := ret.Get(0).(func(int, redmine.WikiPage) (*redmine.WikiPage, error)); ok {
		return rf(projectId, wikiPage)
	}
	if rf, ok := ret.Get(0).(func(int, redmine.WikiPage) *redmine.WikiPage); ok {
		r0 = rf(projectId, wikiPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.WikiPage)
		}
	}

	if rf, ok := ret.Get(1).(func(int, redmine.WikiPage) error); ok {
		r1 = rf(projectId, wikiPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Projects provides a mock function with given fields:
func (_m *Api) Projects() ([]redmine.Project, error) {
	ret := _m.Called()

	var r0 []redmine.Project
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redmine.Project, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redmine.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.Project)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: project
func (_m *Api) UpdateProject(project redmine.Project) error {
	ret := _m.Called(project)

	var r0 error
	if rf, ok := ret.Get(0).(func(redmine.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWikiPage provides a mock function with given fields: projectId, wikiPage
func (_m *Api) UpdateWikiPage(projectId int, wikiPage redmine.WikiPage) error {
	ret := _m.Called(projectId, wikiPage)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, redmine.WikiPage) error); ok {
		r0 = rf(projectId, wikiPage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Users provides a mock function with given fields:
func (_m *Api) Users() ([]redmine.User, error) {
	ret := _m.Called()

	var r0 []redmine.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redmine.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redmine.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redmine.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WikiPage provides a mock function with given fields: projectId, title
func (_m *Api) WikiPage(projectId int, title string) (*redmine.WikiPage, error) {
	ret := _m.Called(projectId, title)

	var r0 *redmine.WikiPage
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*redmine.WikiPage, error)); ok {
		return rf(projectId, title)
	}
	if rf, ok := ret.Get(0).(func(int, string) *redmine.WikiPage); ok {
		r0 = rf(projectId, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redmine.WikiPage)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(projectId, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApi creates a new instance of Api. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *Api {
	mock := &Api{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
