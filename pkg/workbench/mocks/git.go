// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Git is an autogenerated mock type for the git type
type Git struct {
	mock.Mock
}

// CheckoutBranch provides a mock function with given fields: name
func (_m *Git) CheckoutBranch(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPath provides a mock function with given fields:
func (_m *Git) GetPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetPath provides a mock function with given fields: path
func (_m *Git) SetPath(path string) {
	_m.Called(path)
}

// NewGit creates a new instance of Git. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *Git {
	mock := &Git{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
